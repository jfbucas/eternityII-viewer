
puzzles[ nb_puzzles ] = "brendan/pieces_13x11.txt.js,Brendan 13x11".split( splitreg ); nb_puzzles++;

if ( puzzle == "brendan/pieces_13x11.txt.js" ) {

board_w = 13;
board_h = 11;


pieces[ p ] = "0,0,2,3".split( splitreg ); p++;
pieces[ p ] = "0,0,3,2".split( splitreg ); p++;
pieces[ p ] = "0,0,4,1".split( splitreg ); p++;
pieces[ p ] = "0,0,4,2".split( splitreg ); p++;
pieces[ p ] = "0,1,6,4".split( splitreg ); p++;
pieces[ p ] = "0,1,7,3".split( splitreg ); p++;
pieces[ p ] = "0,1,7,4".split( splitreg ); p++;
pieces[ p ] = "0,1,9,1".split( splitreg ); p++;
pieces[ p ] = "0,1,9,2".split( splitreg ); p++;
pieces[ p ] = "0,1,9,4".split( splitreg ); p++;
pieces[ p ] = "0,1,10,1".split( splitreg ); p++;
pieces[ p ] = "0,1,12,1".split( splitreg ); p++;
pieces[ p ] = "0,1,13,4".split( splitreg ); p++;
pieces[ p ] = "0,1,14,3".split( splitreg ); p++;
pieces[ p ] = "0,1,14,4".split( splitreg ); p++;
pieces[ p ] = "0,2,5,3".split( splitreg ); p++;
pieces[ p ] = "0,2,7,1".split( splitreg ); p++;
pieces[ p ] = "0,2,7,3".split( splitreg ); p++;
pieces[ p ] = "0,2,9,1".split( splitreg ); p++;
pieces[ p ] = "0,2,10,2".split( splitreg ); p++;
pieces[ p ] = "0,2,11,2".split( splitreg ); p++;
pieces[ p ] = "0,2,13,2".split( splitreg ); p++;
pieces[ p ] = "0,2,13,3".split( splitreg ); p++;
pieces[ p ] = "0,2,13,4".split( splitreg ); p++;
pieces[ p ] = "0,2,16,1".split( splitreg ); p++;
pieces[ p ] = "0,3,6,4".split( splitreg ); p++;
pieces[ p ] = "0,3,10,1".split( splitreg ); p++;
pieces[ p ] = "0,3,10,3".split( splitreg ); p++;
pieces[ p ] = "0,3,11,3".split( splitreg ); p++;
pieces[ p ] = "0,3,13,1".split( splitreg ); p++;
pieces[ p ] = "0,3,13,2".split( splitreg ); p++;
pieces[ p ] = "0,3,15,2".split( splitreg ); p++;
pieces[ p ] = "0,3,16,2".split( splitreg ); p++;
pieces[ p ] = "0,3,16,3".split( splitreg ); p++;
pieces[ p ] = "0,3,16,4".split( splitreg ); p++;
pieces[ p ] = "0,4,6,2".split( splitreg ); p++;
pieces[ p ] = "0,4,7,4".split( splitreg ); p++;
pieces[ p ] = "0,4,10,2".split( splitreg ); p++;
pieces[ p ] = "0,4,14,1".split( splitreg ); p++;
pieces[ p ] = "0,4,15,3".split( splitreg ); p++;
pieces[ p ] = "0,4,15,4".split( splitreg ); p++;
pieces[ p ] = "0,4,16,1".split( splitreg ); p++;
pieces[ p ] = "0,4,16,3".split( splitreg ); p++;
pieces[ p ] = "0,4,16,4".split( splitreg ); p++;
pieces[ p ] = "5,5,7,15".split( splitreg ); p++;
pieces[ p ] = "5,5,15,6".split( splitreg ); p++;
pieces[ p ] = "5,6,13,11".split( splitreg ); p++;
pieces[ p ] = "5,7,8,13".split( splitreg ); p++;
pieces[ p ] = "5,8,7,6".split( splitreg ); p++;
pieces[ p ] = "5,8,9,9".split( splitreg ); p++;
pieces[ p ] = "5,8,9,16".split( splitreg ); p++;
pieces[ p ] = "5,8,12,6".split( splitreg ); p++;
pieces[ p ] = "5,8,12,13".split( splitreg ); p++;
pieces[ p ] = "5,8,13,13".split( splitreg ); p++;
pieces[ p ] = "5,8,14,11".split( splitreg ); p++;
pieces[ p ] = "5,8,15,16".split( splitreg ); p++;
pieces[ p ] = "5,9,9,9".split( splitreg ); p++;
pieces[ p ] = "5,9,12,12".split( splitreg ); p++;
pieces[ p ] = "5,9,13,8".split( splitreg ); p++;
pieces[ p ] = "5,9,13,11".split( splitreg ); p++;
pieces[ p ] = "5,9,15,14".split( splitreg ); p++;
pieces[ p ] = "5,10,7,13".split( splitreg ); p++;
pieces[ p ] = "5,10,10,11".split( splitreg ); p++;
pieces[ p ] = "5,10,16,15".split( splitreg ); p++;
pieces[ p ] = "5,11,12,10".split( splitreg ); p++;
pieces[ p ] = "5,12,6,14".split( splitreg ); p++;
pieces[ p ] = "5,12,9,14".split( splitreg ); p++;
pieces[ p ] = "5,13,5,16".split( splitreg ); p++;
pieces[ p ] = "5,13,7,6".split( splitreg ); p++;
pieces[ p ] = "5,13,9,14".split( splitreg ); p++;
pieces[ p ] = "5,13,12,11".split( splitreg ); p++;
pieces[ p ] = "5,13,15,10".split( splitreg ); p++;
pieces[ p ] = "5,14,7,9".split( splitreg ); p++;
pieces[ p ] = "5,14,9,6".split( splitreg ); p++;
pieces[ p ] = "5,14,10,14".split( splitreg ); p++;
pieces[ p ] = "5,15,8,7".split( splitreg ); p++;
pieces[ p ] = "5,16,8,15".split( splitreg ); p++;
pieces[ p ] = "5,16,14,6".split( splitreg ); p++;
pieces[ p ] = "6,6,9,8".split( splitreg ); p++;
pieces[ p ] = "6,6,11,10".split( splitreg ); p++;
pieces[ p ] = "6,6,13,9".split( splitreg ); p++;
pieces[ p ] = "6,7,6,10".split( splitreg ); p++;
pieces[ p ] = "6,7,6,12".split( splitreg ); p++;
pieces[ p ] = "6,8,10,15".split( splitreg ); p++;
pieces[ p ] = "6,8,12,13".split( splitreg ); p++;
pieces[ p ] = "6,8,12,16".split( splitreg ); p++;
pieces[ p ] = "6,8,15,9".split( splitreg ); p++;
pieces[ p ] = "6,10,11,16".split( splitreg ); p++;
pieces[ p ] = "6,10,13,7".split( splitreg ); p++;
pieces[ p ] = "6,11,7,13".split( splitreg ); p++;
pieces[ p ] = "6,11,15,9".split( splitreg ); p++;
pieces[ p ] = "6,11,16,12".split( splitreg ); p++;
pieces[ p ] = "6,12,11,14".split( splitreg ); p++;
pieces[ p ] = "6,12,15,7".split( splitreg ); p++;
pieces[ p ] = "6,14,14,12".split( splitreg ); p++;
pieces[ p ] = "6,16,7,8".split( splitreg ); p++;
pieces[ p ] = "6,16,7,14".split( splitreg ); p++;
pieces[ p ] = "6,16,14,7".split( splitreg ); p++;
pieces[ p ] = "6,16,14,9".split( splitreg ); p++;
pieces[ p ] = "6,16,16,7".split( splitreg ); p++;
pieces[ p ] = "7,7,10,8".split( splitreg ); p++;
pieces[ p ] = "7,7,12,11".split( splitreg ); p++;
pieces[ p ] = "7,8,13,10".split( splitreg ); p++;
pieces[ p ] = "7,8,15,11".split( splitreg ); p++;
pieces[ p ] = "7,8,16,15".split( splitreg ); p++;
pieces[ p ] = "7,10,9,15".split( splitreg ); p++;
pieces[ p ] = "7,10,13,12".split( splitreg ); p++;
pieces[ p ] = "7,11,8,12".split( splitreg ); p++;
pieces[ p ] = "7,11,8,14".split( splitreg ); p++;
pieces[ p ] = "7,11,15,14".split( splitreg ); p++;
pieces[ p ] = "7,14,14,8".split( splitreg ); p++;
pieces[ p ] = "7,14,15,9".split( splitreg ); p++;
pieces[ p ] = "7,15,10,13".split( splitreg ); p++;
pieces[ p ] = "8,8,11,10".split( splitreg ); p++;
pieces[ p ] = "8,9,13,10".split( splitreg ); p++;
pieces[ p ] = "8,11,10,13".split( splitreg ); p++;
pieces[ p ] = "8,11,12,10".split( splitreg ); p++;
pieces[ p ] = "8,11,13,11".split( splitreg ); p++;
pieces[ p ] = "8,11,15,9".split( splitreg ); p++;
pieces[ p ] = "8,12,12,10".split( splitreg ); p++;
pieces[ p ] = "8,12,15,16".split( splitreg ); p++;
pieces[ p ] = "8,15,9,16".split( splitreg ); p++;
pieces[ p ] = "8,16,16,9".split( splitreg ); p++;
pieces[ p ] = "9,10,12,11".split( splitreg ); p++;
pieces[ p ] = "9,10,15,14".split( splitreg ); p++;
pieces[ p ] = "9,12,14,16".split( splitreg ); p++;
pieces[ p ] = "9,13,15,11".split( splitreg ); p++;
pieces[ p ] = "9,14,16,14".split( splitreg ); p++;
pieces[ p ] = "9,15,11,13".split( splitreg ); p++;
pieces[ p ] = "9,15,16,12".split( splitreg ); p++;
pieces[ p ] = "10,11,11,13".split( splitreg ); p++;
pieces[ p ] = "10,11,11,16".split( splitreg ); p++;
pieces[ p ] = "10,11,12,16".split( splitreg ); p++;
pieces[ p ] = "10,14,12,12".split( splitreg ); p++;
pieces[ p ] = "10,14,14,12".split( splitreg ); p++;
pieces[ p ] = "10,14,14,15".split( splitreg ); p++;
pieces[ p ] = "10,16,14,12".split( splitreg ); p++;
pieces[ p ] = "11,11,15,15".split( splitreg ); p++;
pieces[ p ] = "11,12,15,14".split( splitreg ); p++;
pieces[ p ] = "12,12,13,15".split( splitreg ); p++;
pieces[ p ] = "12,16,13,15".split( splitreg ); p++;
pieces[ p ] = "12,16,16,15".split( splitreg ); p++;
pieces[ p ] = "13,14,13,15".split( splitreg ); p++;

// piece,space,rotation
fixed[ f ] = "0,0,1".split( splitreg ); f++;

nb_pieces = p;
nb_fixed = f;

}

