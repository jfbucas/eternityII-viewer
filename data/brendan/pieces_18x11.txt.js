
puzzles[ nb_puzzles ] = "brendan/pieces_18x11.txt.js,Brendan 18x11".split( splitreg ); nb_puzzles++;

if ( puzzle == "brendan/pieces_18x11.txt.js" ) {

board_w = 18;
board_h = 11;


pieces[ p ] = "0,0,1,2".split( splitreg ); p++;
pieces[ p ] = "0,0,3,3".split( splitreg ); p++;
pieces[ p ] = "0,0,3,4".split( splitreg ); p++;
pieces[ p ] = "0,0,4,3".split( splitreg ); p++;
pieces[ p ] = "0,1,6,5".split( splitreg ); p++;
pieces[ p ] = "0,1,7,3".split( splitreg ); p++;
pieces[ p ] = "0,1,8,4".split( splitreg ); p++;
pieces[ p ] = "0,1,11,1".split( splitreg ); p++;
pieces[ p ] = "0,1,12,5".split( splitreg ); p++;
pieces[ p ] = "0,1,15,1".split( splitreg ); p++;
pieces[ p ] = "0,1,15,2".split( splitreg ); p++;
pieces[ p ] = "0,1,15,4".split( splitreg ); p++;
pieces[ p ] = "0,1,15,5".split( splitreg ); p++;
pieces[ p ] = "0,1,19,3".split( splitreg ); p++;
pieces[ p ] = "0,2,7,3".split( splitreg ); p++;
pieces[ p ] = "0,2,8,1".split( splitreg ); p++;
pieces[ p ] = "0,2,8,3".split( splitreg ); p++;
pieces[ p ] = "0,2,9,1".split( splitreg ); p++;
pieces[ p ] = "0,2,9,3".split( splitreg ); p++;
pieces[ p ] = "0,2,11,2".split( splitreg ); p++;
pieces[ p ] = "0,2,13,1".split( splitreg ); p++;
pieces[ p ] = "0,2,17,5".split( splitreg ); p++;
pieces[ p ] = "0,2,18,2".split( splitreg ); p++;
pieces[ p ] = "0,2,19,1".split( splitreg ); p++;
pieces[ p ] = "0,2,20,5".split( splitreg ); p++;
pieces[ p ] = "0,3,6,4".split( splitreg ); p++;
pieces[ p ] = "0,3,7,3".split( splitreg ); p++;
pieces[ p ] = "0,3,9,4".split( splitreg ); p++;
pieces[ p ] = "0,3,10,5".split( splitreg ); p++;
pieces[ p ] = "0,3,12,2".split( splitreg ); p++;
pieces[ p ] = "0,3,13,2".split( splitreg ); p++;
pieces[ p ] = "0,3,14,2".split( splitreg ); p++;
pieces[ p ] = "0,3,15,1".split( splitreg ); p++;
pieces[ p ] = "0,3,17,5".split( splitreg ); p++;
pieces[ p ] = "0,4,8,1".split( splitreg ); p++;
pieces[ p ] = "0,4,8,4".split( splitreg ); p++;
pieces[ p ] = "0,4,9,4".split( splitreg ); p++;
pieces[ p ] = "0,4,11,4".split( splitreg ); p++;
pieces[ p ] = "0,4,14,1".split( splitreg ); p++;
pieces[ p ] = "0,4,14,4".split( splitreg ); p++;
pieces[ p ] = "0,4,16,3".split( splitreg ); p++;
pieces[ p ] = "0,4,18,2".split( splitreg ); p++;
pieces[ p ] = "0,4,20,4".split( splitreg ); p++;
pieces[ p ] = "0,4,20,5".split( splitreg ); p++;
pieces[ p ] = "0,5,6,4".split( splitreg ); p++;
pieces[ p ] = "0,5,11,5".split( splitreg ); p++;
pieces[ p ] = "0,5,12,2".split( splitreg ); p++;
pieces[ p ] = "0,5,15,1".split( splitreg ); p++;
pieces[ p ] = "0,5,15,5".split( splitreg ); p++;
pieces[ p ] = "0,5,16,3".split( splitreg ); p++;
pieces[ p ] = "0,5,17,2".split( splitreg ); p++;
pieces[ p ] = "0,5,18,3".split( splitreg ); p++;
pieces[ p ] = "0,5,19,2".split( splitreg ); p++;
pieces[ p ] = "0,5,20,1".split( splitreg ); p++;
pieces[ p ] = "6,6,10,16".split( splitreg ); p++;
pieces[ p ] = "6,6,12,14".split( splitreg ); p++;
pieces[ p ] = "6,6,17,9".split( splitreg ); p++;
pieces[ p ] = "6,7,10,19".split( splitreg ); p++;
pieces[ p ] = "6,7,11,13".split( splitreg ); p++;
pieces[ p ] = "6,7,15,13".split( splitreg ); p++;
pieces[ p ] = "6,7,17,7".split( splitreg ); p++;
pieces[ p ] = "6,8,15,9".split( splitreg ); p++;
pieces[ p ] = "6,9,13,12".split( splitreg ); p++;
pieces[ p ] = "6,9,14,15".split( splitreg ); p++;
pieces[ p ] = "6,9,18,8".split( splitreg ); p++;
pieces[ p ] = "6,9,20,17".split( splitreg ); p++;
pieces[ p ] = "6,10,12,7".split( splitreg ); p++;
pieces[ p ] = "6,10,14,12".split( splitreg ); p++;
pieces[ p ] = "6,10,15,16".split( splitreg ); p++;
pieces[ p ] = "6,10,19,11".split( splitreg ); p++;
pieces[ p ] = "6,11,9,12".split( splitreg ); p++;
pieces[ p ] = "6,11,19,18".split( splitreg ); p++;
pieces[ p ] = "6,12,6,16".split( splitreg ); p++;
pieces[ p ] = "6,12,18,7".split( splitreg ); p++;
pieces[ p ] = "6,13,14,8".split( splitreg ); p++;
pieces[ p ] = "6,13,15,7".split( splitreg ); p++;
pieces[ p ] = "6,13,15,17".split( splitreg ); p++;
pieces[ p ] = "6,14,18,10".split( splitreg ); p++;
pieces[ p ] = "6,15,10,16".split( splitreg ); p++;
pieces[ p ] = "6,15,12,13".split( splitreg ); p++;
pieces[ p ] = "6,15,13,18".split( splitreg ); p++;
pieces[ p ] = "6,16,14,7".split( splitreg ); p++;
pieces[ p ] = "6,17,9,13".split( splitreg ); p++;
pieces[ p ] = "6,17,10,12".split( splitreg ); p++;
pieces[ p ] = "6,18,18,12".split( splitreg ); p++;
pieces[ p ] = "6,18,20,9".split( splitreg ); p++;
pieces[ p ] = "6,19,10,17".split( splitreg ); p++;
pieces[ p ] = "6,19,16,16".split( splitreg ); p++;
pieces[ p ] = "6,20,11,14".split( splitreg ); p++;
pieces[ p ] = "7,7,14,8".split( splitreg ); p++;
pieces[ p ] = "7,8,8,13".split( splitreg ); p++;
pieces[ p ] = "7,8,12,17".split( splitreg ); p++;
pieces[ p ] = "7,8,15,20".split( splitreg ); p++;
pieces[ p ] = "7,8,17,19".split( splitreg ); p++;
pieces[ p ] = "7,9,11,9".split( splitreg ); p++;
pieces[ p ] = "7,9,11,10".split( splitreg ); p++;
pieces[ p ] = "7,9,14,11".split( splitreg ); p++;
pieces[ p ] = "7,9,19,18".split( splitreg ); p++;
pieces[ p ] = "7,9,20,19".split( splitreg ); p++;
pieces[ p ] = "7,10,13,9".split( splitreg ); p++;
pieces[ p ] = "7,10,19,14".split( splitreg ); p++;
pieces[ p ] = "7,11,10,20".split( splitreg ); p++;
pieces[ p ] = "7,13,8,17".split( splitreg ); p++;
pieces[ p ] = "7,13,16,15".split( splitreg ); p++;
pieces[ p ] = "7,13,19,19".split( splitreg ); p++;
pieces[ p ] = "7,14,19,10".split( splitreg ); p++;
pieces[ p ] = "7,15,10,20".split( splitreg ); p++;
pieces[ p ] = "7,15,14,20".split( splitreg ); p++;
pieces[ p ] = "7,16,9,20".split( splitreg ); p++;
pieces[ p ] = "7,16,11,15".split( splitreg ); p++;
pieces[ p ] = "7,16,18,17".split( splitreg ); p++;
pieces[ p ] = "7,17,19,16".split( splitreg ); p++;
pieces[ p ] = "7,18,10,9".split( splitreg ); p++;
pieces[ p ] = "7,18,10,14".split( splitreg ); p++;
pieces[ p ] = "7,18,11,9".split( splitreg ); p++;
pieces[ p ] = "7,19,12,17".split( splitreg ); p++;
pieces[ p ] = "7,19,13,11".split( splitreg ); p++;
pieces[ p ] = "7,20,16,20".split( splitreg ); p++;
pieces[ p ] = "8,8,11,11".split( splitreg ); p++;
pieces[ p ] = "8,9,18,16".split( splitreg ); p++;
pieces[ p ] = "8,10,11,18".split( splitreg ); p++;
pieces[ p ] = "8,10,12,17".split( splitreg ); p++;
pieces[ p ] = "8,10,18,18".split( splitreg ); p++;
pieces[ p ] = "8,13,11,12".split( splitreg ); p++;
pieces[ p ] = "8,13,19,12".split( splitreg ); p++;
pieces[ p ] = "8,14,15,13".split( splitreg ); p++;
pieces[ p ] = "8,15,17,19".split( splitreg ); p++;
pieces[ p ] = "8,15,20,11".split( splitreg ); p++;
pieces[ p ] = "8,16,9,11".split( splitreg ); p++;
pieces[ p ] = "8,16,11,19".split( splitreg ); p++;
pieces[ p ] = "8,16,13,9".split( splitreg ); p++;
pieces[ p ] = "8,16,15,19".split( splitreg ); p++;
pieces[ p ] = "8,16,17,10".split( splitreg ); p++;
pieces[ p ] = "8,16,17,13".split( splitreg ); p++;
pieces[ p ] = "8,16,17,15".split( splitreg ); p++;
pieces[ p ] = "8,16,18,15".split( splitreg ); p++;
pieces[ p ] = "8,17,19,17".split( splitreg ); p++;
pieces[ p ] = "8,18,9,10".split( splitreg ); p++;
pieces[ p ] = "8,18,13,16".split( splitreg ); p++;
pieces[ p ] = "8,19,9,9".split( splitreg ); p++;
pieces[ p ] = "8,19,12,14".split( splitreg ); p++;
pieces[ p ] = "8,19,15,19".split( splitreg ); p++;
pieces[ p ] = "8,20,13,14".split( splitreg ); p++;
pieces[ p ] = "8,20,14,17".split( splitreg ); p++;
pieces[ p ] = "9,9,10,16".split( splitreg ); p++;
pieces[ p ] = "9,10,14,14".split( splitreg ); p++;
pieces[ p ] = "9,11,19,11".split( splitreg ); p++;
pieces[ p ] = "9,13,19,14".split( splitreg ); p++;
pieces[ p ] = "9,14,13,18".split( splitreg ); p++;
pieces[ p ] = "9,14,17,13".split( splitreg ); p++;
pieces[ p ] = "9,15,17,19".split( splitreg ); p++;
pieces[ p ] = "9,16,12,12".split( splitreg ); p++;
pieces[ p ] = "9,16,17,10".split( splitreg ); p++;
pieces[ p ] = "9,18,14,12".split( splitreg ); p++;
pieces[ p ] = "9,18,17,15".split( splitreg ); p++;
pieces[ p ] = "9,19,13,12".split( splitreg ); p++;
pieces[ p ] = "10,11,10,13".split( splitreg ); p++;
pieces[ p ] = "10,11,13,20".split( splitreg ); p++;
pieces[ p ] = "10,12,11,18".split( splitreg ); p++;
pieces[ p ] = "10,12,20,16".split( splitreg ); p++;
pieces[ p ] = "10,13,16,19".split( splitreg ); p++;
pieces[ p ] = "10,14,13,11".split( splitreg ); p++;
pieces[ p ] = "10,14,14,14".split( splitreg ); p++;
pieces[ p ] = "10,14,14,17".split( splitreg ); p++;
pieces[ p ] = "10,17,16,11".split( splitreg ); p++;
pieces[ p ] = "10,17,16,19".split( splitreg ); p++;
pieces[ p ] = "10,18,16,12".split( splitreg ); p++;
pieces[ p ] = "10,18,20,14".split( splitreg ); p++;
pieces[ p ] = "10,20,16,11".split( splitreg ); p++;
pieces[ p ] = "10,20,18,18".split( splitreg ); p++;
pieces[ p ] = "11,11,12,17".split( splitreg ); p++;
pieces[ p ] = "11,11,19,17".split( splitreg ); p++;
pieces[ p ] = "11,11,20,12".split( splitreg ); p++;
pieces[ p ] = "11,12,17,15".split( splitreg ); p++;
pieces[ p ] = "11,13,17,17".split( splitreg ); p++;
pieces[ p ] = "11,18,14,17".split( splitreg ); p++;
pieces[ p ] = "11,19,20,15".split( splitreg ); p++;
pieces[ p ] = "11,20,14,16".split( splitreg ); p++;
pieces[ p ] = "12,12,16,14".split( splitreg ); p++;
pieces[ p ] = "12,12,20,13".split( splitreg ); p++;
pieces[ p ] = "12,13,12,20".split( splitreg ); p++;
pieces[ p ] = "12,13,20,16".split( splitreg ); p++;
pieces[ p ] = "12,14,14,14".split( splitreg ); p++;
pieces[ p ] = "12,15,12,17".split( splitreg ); p++;
pieces[ p ] = "12,15,19,18".split( splitreg ); p++;
pieces[ p ] = "12,20,17,18".split( splitreg ); p++;
pieces[ p ] = "12,20,18,17".split( splitreg ); p++;
pieces[ p ] = "13,14,20,20".split( splitreg ); p++;
pieces[ p ] = "13,16,19,14".split( splitreg ); p++;
pieces[ p ] = "13,17,15,16".split( splitreg ); p++;
pieces[ p ] = "13,18,16,15".split( splitreg ); p++;
pieces[ p ] = "13,18,20,15".split( splitreg ); p++;
pieces[ p ] = "13,20,14,20".split( splitreg ); p++;
pieces[ p ] = "15,16,15,19".split( splitreg ); p++;
pieces[ p ] = "15,18,19,18".split( splitreg ); p++;
pieces[ p ] = "15,18,20,20".split( splitreg ); p++;
pieces[ p ] = "15,20,17,20".split( splitreg ); p++;
pieces[ p ] = "16,18,18,19".split( splitreg ); p++;

// piece,space,rotation
fixed[ f ] = "0,0,1".split( splitreg ); f++;

nb_pieces = p;
nb_fixed = f;

}

