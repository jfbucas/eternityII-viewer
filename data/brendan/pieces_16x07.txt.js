
puzzles[ nb_puzzles ] = "brendan/pieces_16x07.txt.js,Brendan 16x07".split( splitreg ); nb_puzzles++;

if ( puzzle == "brendan/pieces_16x07.txt.js" ) {

board_w = 16;
board_h = 7;


pieces[ p ] = "0,0,2,4".split( splitreg ); p++;
pieces[ p ] = "0,0,3,1".split( splitreg ); p++;
pieces[ p ] = "0,0,4,2".split( splitreg ); p++;
pieces[ p ] = "0,0,4,4".split( splitreg ); p++;
pieces[ p ] = "0,1,5,3".split( splitreg ); p++;
pieces[ p ] = "0,1,6,1".split( splitreg ); p++;
pieces[ p ] = "0,1,7,2".split( splitreg ); p++;
pieces[ p ] = "0,1,9,2".split( splitreg ); p++;
pieces[ p ] = "0,1,9,3".split( splitreg ); p++;
pieces[ p ] = "0,1,11,2".split( splitreg ); p++;
pieces[ p ] = "0,1,12,2".split( splitreg ); p++;
pieces[ p ] = "0,1,13,1".split( splitreg ); p++;
pieces[ p ] = "0,1,13,2".split( splitreg ); p++;
pieces[ p ] = "0,1,14,1".split( splitreg ); p++;
pieces[ p ] = "0,1,14,4".split( splitreg ); p++;
pieces[ p ] = "0,2,5,1".split( splitreg ); p++;
pieces[ p ] = "0,2,5,3".split( splitreg ); p++;
pieces[ p ] = "0,2,7,1".split( splitreg ); p++;
pieces[ p ] = "0,2,8,1".split( splitreg ); p++;
pieces[ p ] = "0,2,8,3".split( splitreg ); p++;
pieces[ p ] = "0,2,8,4".split( splitreg ); p++;
pieces[ p ] = "0,2,9,3".split( splitreg ); p++;
pieces[ p ] = "0,2,9,4".split( splitreg ); p++;
pieces[ p ] = "0,2,10,3".split( splitreg ); p++;
pieces[ p ] = "0,2,13,2".split( splitreg ); p++;
pieces[ p ] = "0,3,6,2".split( splitreg ); p++;
pieces[ p ] = "0,3,6,4".split( splitreg ); p++;
pieces[ p ] = "0,3,9,1".split( splitreg ); p++;
pieces[ p ] = "0,3,9,3".split( splitreg ); p++;
pieces[ p ] = "0,3,11,3".split( splitreg ); p++;
pieces[ p ] = "0,3,12,2".split( splitreg ); p++;
pieces[ p ] = "0,3,12,3".split( splitreg ); p++;
pieces[ p ] = "0,3,12,4".split( splitreg ); p++;
pieces[ p ] = "0,3,13,1".split( splitreg ); p++;
pieces[ p ] = "0,4,5,1".split( splitreg ); p++;
pieces[ p ] = "0,4,6,2".split( splitreg ); p++;
pieces[ p ] = "0,4,7,4".split( splitreg ); p++;
pieces[ p ] = "0,4,8,2".split( splitreg ); p++;
pieces[ p ] = "0,4,8,4".split( splitreg ); p++;
pieces[ p ] = "0,4,9,1".split( splitreg ); p++;
pieces[ p ] = "0,4,10,4".split( splitreg ); p++;
pieces[ p ] = "0,4,13,3".split( splitreg ); p++;
pieces[ p ] = "5,5,14,6".split( splitreg ); p++;
pieces[ p ] = "5,6,7,9".split( splitreg ); p++;
pieces[ p ] = "5,6,13,6".split( splitreg ); p++;
pieces[ p ] = "5,6,13,14".split( splitreg ); p++;
pieces[ p ] = "5,6,14,7".split( splitreg ); p++;
pieces[ p ] = "5,7,10,7".split( splitreg ); p++;
pieces[ p ] = "5,7,12,6".split( splitreg ); p++;
pieces[ p ] = "5,8,6,11".split( splitreg ); p++;
pieces[ p ] = "5,8,9,10".split( splitreg ); p++;
pieces[ p ] = "5,8,10,8".split( splitreg ); p++;
pieces[ p ] = "5,8,10,14".split( splitreg ); p++;
pieces[ p ] = "5,8,13,9".split( splitreg ); p++;
pieces[ p ] = "5,9,13,12".split( splitreg ); p++;
pieces[ p ] = "5,9,14,12".split( splitreg ); p++;
pieces[ p ] = "5,11,6,6".split( splitreg ); p++;
pieces[ p ] = "5,11,7,14".split( splitreg ); p++;
pieces[ p ] = "5,11,8,10".split( splitreg ); p++;
pieces[ p ] = "5,11,9,7".split( splitreg ); p++;
pieces[ p ] = "5,12,7,11".split( splitreg ); p++;
pieces[ p ] = "5,12,8,10".split( splitreg ); p++;
pieces[ p ] = "5,12,10,6".split( splitreg ); p++;
pieces[ p ] = "5,12,14,6".split( splitreg ); p++;
pieces[ p ] = "5,13,7,7".split( splitreg ); p++;
pieces[ p ] = "5,13,7,10".split( splitreg ); p++;
pieces[ p ] = "5,13,9,8".split( splitreg ); p++;
pieces[ p ] = "5,14,9,12".split( splitreg ); p++;
pieces[ p ] = "5,14,12,14".split( splitreg ); p++;
pieces[ p ] = "6,6,10,7".split( splitreg ); p++;
pieces[ p ] = "6,6,12,10".split( splitreg ); p++;
pieces[ p ] = "6,7,12,13".split( splitreg ); p++;
pieces[ p ] = "6,9,9,11".split( splitreg ); p++;
pieces[ p ] = "6,10,9,9".split( splitreg ); p++;
pieces[ p ] = "6,10,9,12".split( splitreg ); p++;
pieces[ p ] = "6,10,10,9".split( splitreg ); p++;
pieces[ p ] = "6,10,11,13".split( splitreg ); p++;
pieces[ p ] = "6,10,13,7".split( splitreg ); p++;
pieces[ p ] = "6,11,11,9".split( splitreg ); p++;
pieces[ p ] = "6,14,10,13".split( splitreg ); p++;
pieces[ p ] = "6,14,12,11".split( splitreg ); p++;
pieces[ p ] = "6,14,12,14".split( splitreg ); p++;
pieces[ p ] = "6,14,13,11".split( splitreg ); p++;
pieces[ p ] = "7,7,8,11".split( splitreg ); p++;
pieces[ p ] = "7,7,13,14".split( splitreg ); p++;
pieces[ p ] = "7,8,10,11".split( splitreg ); p++;
pieces[ p ] = "7,9,9,12".split( splitreg ); p++;
pieces[ p ] = "7,9,13,8".split( splitreg ); p++;
pieces[ p ] = "7,10,9,14".split( splitreg ); p++;
pieces[ p ] = "7,10,12,10".split( splitreg ); p++;
pieces[ p ] = "7,10,13,10".split( splitreg ); p++;
pieces[ p ] = "7,11,9,14".split( splitreg ); p++;
pieces[ p ] = "7,11,13,13".split( splitreg ); p++;
pieces[ p ] = "7,12,8,8".split( splitreg ); p++;
pieces[ p ] = "7,12,11,11".split( splitreg ); p++;
pieces[ p ] = "7,12,12,13".split( splitreg ); p++;
pieces[ p ] = "8,8,8,10".split( splitreg ); p++;
pieces[ p ] = "8,8,12,14".split( splitreg ); p++;
pieces[ p ] = "8,10,14,10".split( splitreg ); p++;
pieces[ p ] = "8,10,14,13".split( splitreg ); p++;
pieces[ p ] = "8,11,9,13".split( splitreg ); p++;
pieces[ p ] = "8,11,14,13".split( splitreg ); p++;
pieces[ p ] = "8,12,9,9".split( splitreg ); p++;
pieces[ p ] = "8,12,10,14".split( splitreg ); p++;
pieces[ p ] = "8,13,13,11".split( splitreg ); p++;
pieces[ p ] = "8,14,13,11".split( splitreg ); p++;
pieces[ p ] = "9,11,12,10".split( splitreg ); p++;
pieces[ p ] = "9,14,12,11".split( splitreg ); p++;
pieces[ p ] = "10,12,11,11".split( splitreg ); p++;
pieces[ p ] = "11,11,13,12".split( splitreg ); p++;
pieces[ p ] = "11,14,12,13".split( splitreg ); p++;
pieces[ p ] = "11,14,13,14".split( splitreg ); p++;

// piece,space,rotation
fixed[ f ] = "0,0,1".split( splitreg ); f++;

nb_pieces = p;
nb_fixed = f;

}

